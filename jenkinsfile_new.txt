#!groovy
def latestMavenArtifactTagBumped = null
def grafanaImage = null
def dtrImageBumpedVersion = null
pipeline {
 agent {
 label 'dynslaves'
 }
 environment {
 NO_PROXY =
'.local, .global.anz.com, .service.anz, .service.test, .s
ervice.dev, .apps.anz, .globaltest.anz.com, .service.anz,
.dev.anz, .anz'
 }
 stages {
 stage ('Initialize') {
 steps {
 sh '''
 echo "PATH = ${PATH}"
 echo "M2_HOME = ${M2_HOME}"
 echo "JAVA_HOME = ${JAVA_HOME}"
 echo "JAVA_HOME = $JAVA_HOME"
 echo "JENKINS_HOME = ${JENKINS_HOME}"
 echo "Current workspace is
$WORKSPACE"
 '''
 }
 }
 stage ('Checkout') {
 steps{
 deleteDir() /* clean up our dynamic
slave workspace at the start-/tmp/workspace/COPS/
COPS_Grafana_Build */
checkout([$class: 'GitSCM', branches: [[name: '*/master']], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: 'aublcibotdsa_global', url: '<GIT URL of Grafana Repo>']]])
 }
 }
 stage ('Build grafana image in VM dbusa02l') {
 agent {
 label "dbusa02vmslave"
 }
 steps {
 deleteDir() /* clean up VM workspace atthe start-/app/BL/workspace/COPS/
COPS_Grafana_Build */
 echo 'Build grafana image in VM dbusa02l'
 checkout([$class: 'GitSCM', branches:
[[name: '*/master']], doGenerateSubmoduleConfigurations:
false, extensions: [], submoduleCfg: [],
userRemoteConfigs: [[credentialsId:
'aublcibotdsa_global', url: '<GIT for Grafana Repo>']]])

 script{
 // Get the latest grafana image Version from DTR
 def GrafanaImageLlatestversion= dtrutil action:
"getLatestImageTag", registry: "https://
dtrqa.docker.service.anz", repository: "bl-cops",
imagename: "grafana"
 println "Final Image
Tag:"+GrafanaImageLlatestversion
 // Get the version incremented for
building the new image
 dtrImageBumpedVersion = semverutil
bump: "PATCH", version: "$
{GrafanaImageLlatestversion}"
 println "Bumped Up
Version:"+dtrImageBumpedVersion
 //docker registry repository name
 def
dockerRegistryPath='<docker registry path>'
 //image name
 def
imageName='grafana'
 def ImageNameWithDTRRepoPath = "$
{dockerRegistryPath}/${imageName}"
 // Build new Docker image grafana
 echo 'Build new Docker image
grafana'
 grafanaImage =
docker.build(ImageNameWithDTRRepoPath)
 }
 }

 }
 stage ('Create tags -latestversion,latestfor
prometheus image and push the image to DTR from VM
dbusa02l') {
 agent {
 label "dbusa02vmslave"
 }
 // Login to Docker Trusted Registry
 steps{
 script{
 echo 'Login to Docker Trusted
Registry'
 docker.withRegistry('https://
dtrqa.docker.service.anz', 'aublcibotdsa_globaltest') {
 // Create the
tags(dtrImageBumpedVersion and latest) and push to DTR
 echo 'Create tags for grafana image with bumpedVersion and latest and push tags to DTR'
 grafanaImage.push("$
{dtrImageBumpedVersion}")

grafanaImage.push("latest")
 }
 }
 }
 }
 stage ('Remove created grafana images from VM
dbusa02l') {
 agent {
 label "dbusa02vmslave"
 }
 steps{
 // Delete image from VM dbusa02l
 echo 'Delete grafana
image created on VM-dbusa02l'
 sh "docker rmi --force \$(docker images -q
${grafanaImage.id} | uniq)"
 echo 'Delete workspace after building the
grafana image:'
 deleteDir() /* clean up VM workspace at the end after building image*/
 }
 }
 }
 post {
 always {
 deleteDir() /* clean up our dymanic slave
workspace at the end*/
 }
 success {
 echo 'Build Success!'
 notify type: "slack", message: "Build
succeeded", channel: "#cops", messageHead:true, color:
"good", messageDetails: true, addTestSummary: false,
addFailedTestResults: false, addArtifactsHeading:false
 }
 unstable {
 echo 'Build Unstable!'
 notify type: "slack", message: "Build
unstable", channel: "#cops", messageHead:true, color:
"danger", messageDetails: true, addTestSummary: false,
addFailedTestResults: false, addArtifactsHeading:false
 }
 failure {
 echo 'Build Failed!'
 notify type: "slack", message: "Build
failed", channel: "#cops", messageHead:true, color:
"danger", messageDetails: true, addTestSummary: false,
addFailedTestResults: false, addArtifactsHeading:false
 }
 }
}